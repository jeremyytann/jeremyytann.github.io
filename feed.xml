<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jeremyytann.github.io/</id><title>Jeremy's Blog</title><subtitle>Jeremy's Blog</subtitle> <updated>2022-10-23T17:37:02+08:00</updated> <author> <name>Tan Chia Chun</name> <uri>https://jeremyytann.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jeremyytann.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jeremyytann.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator> <rights> © 2022 Tan Chia Chun </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Advanced Dart</title><link href="https://jeremyytann.github.io/posts/Advanced-Dart/" rel="alternate" type="text/html" title="Advanced Dart" /><published>2022-08-30T12:45:00+08:00</published> <updated>2022-09-01T16:44:03+08:00</updated> <id>https://jeremyytann.github.io/posts/Advanced-Dart/</id> <content src="https://jeremyytann.github.io/posts/Advanced-Dart/" /> <author> <name>Tan Chia Chun</name> </author> <category term="Notes" /> <category term="Dart" /> <summary> Async and Await The async and await keywords provide a declarative way to define asynchronous functions and use their results. Async Async functions always return a promise. To define an async function, add async before the function body. Asynchronous Task is a task that whose results are not returned immediately. Await Await expressions make promise-returning functions behave as thoug... </summary> </entry> <entry><title>Basics of Dart</title><link href="https://jeremyytann.github.io/posts/Basics-Of-Dart/" rel="alternate" type="text/html" title="Basics of Dart" /><published>2022-08-28T16:35:00+08:00</published> <updated>2022-09-01T12:58:28+08:00</updated> <id>https://jeremyytann.github.io/posts/Basics-Of-Dart/</id> <content src="https://jeremyytann.github.io/posts/Basics-Of-Dart/" /> <author> <name>Tan Chia Chun</name> </author> <category term="Notes" /> <category term="Dart" /> <summary> Classes and Methods Class A class is an abstract blueprint used to create more specific, concrete objects. Object Objects are instances of classes created with specific data. class Person { void sayHi() { print('Hi'); } } void call() { final person = Person(); person.sayHi(); } Conditional Property Access In order to guard access to a property or method of an object tha... </summary> </entry> <entry><title>UML Class Diagram</title><link href="https://jeremyytann.github.io/posts/UML-Class-Diagram/" rel="alternate" type="text/html" title="UML Class Diagram" /><published>2022-07-23T18:55:00+08:00</published> <updated>2022-07-25T18:52:38+08:00</updated> <id>https://jeremyytann.github.io/posts/UML-Class-Diagram/</id> <content src="https://jeremyytann.github.io/posts/UML-Class-Diagram/" /> <author> <name>Tan Chia Chun</name> </author> <category term="Notes" /> <category term="Object-Oriented Programming" /> <summary> UML Class Notation A class represents a concept that encapsulates state (attributes) and behavior (operations). Each attribute has a type and each operation has a signature. The class name is the only mandatory information. Class Name The name of the class appears in the first partition. Class Attributes Attributes are shown in the second partition. The attribute type is shown ... </summary> </entry> <entry><title>Model-View-Controller Pattern</title><link href="https://jeremyytann.github.io/posts/Model-View-Controller-Pattern/" rel="alternate" type="text/html" title="Model-View-Controller Pattern" /><published>2022-07-23T15:32:00+08:00</published> <updated>2022-07-23T16:58:54+08:00</updated> <id>https://jeremyytann.github.io/posts/Model-View-Controller-Pattern/</id> <content src="https://jeremyytann.github.io/posts/Model-View-Controller-Pattern/" /> <author> <name>Tan Chia Chun</name> </author> <category term="Notes" /> <category term="Software Architecture" /> <summary> Model-View-Controller (MVC) The Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components: the model, the view, and the controller. Each of these components are built to handle specific development aspects of an application. Model Model is the central component of the pattern. It is the application’s dynamic data structure, ind... </summary> </entry> <entry><title>Process and Thread</title><link href="https://jeremyytann.github.io/posts/Process-and-Thread/" rel="alternate" type="text/html" title="Process and Thread" /><published>2022-07-21T15:45:00+08:00</published> <updated>2022-07-21T15:45:00+08:00</updated> <id>https://jeremyytann.github.io/posts/Process-and-Thread/</id> <content src="https://jeremyytann.github.io/posts/Process-and-Thread/" /> <author> <name>Tan Chia Chun</name> </author> <category term="Notes" /> <category term="Operating System" /> <summary> Process A process is an instance of a computer program in execution state along with all the necessary information required for its proper execution, like program counter, CPU registers, its activation state, memory security and management information etc. A process can create other processes which are known as Child Processes. The process takes more time to terminate and it is isolated, m... </summary> </entry> </feed>
